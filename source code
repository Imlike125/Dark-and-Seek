//
// Dark and Seek
//
//      Copyright 2022. 정지원. All rights reserved.
//
// Games created in c language
//

#include <stdio.h>
#include <time.h>
#include <Windows.h>
#include <conio.h>
#include <stdlib.h>

#define WALL "\u25a0"
#define CLS system("cls")

enum lightlevel { Lv0 = 1, Lv1 = 3, Lv2 = 4, Lv3 = 5 };
enum P1direction { P1LEFT = 65, P1RIGHT = 68, P1UP = 87, P1DOWN = 83 };
enum P2direction { P2LEFT = 75, P2RIGHT = 77, P2UP = 72, P2DOWN = 80 };

#define MAX_MPS 5

int x1 = 0, y1 = 0;
int x2 = 19, y2 = 19;
float turn = 1;
float t_l = 0;
int round;
int count1 = 0, count2 = 0;

#define DISTANCE1 ((x1 - x) > 0 ? x1 - x : x - x1) + ((y1 - y) > 0 ? y1 - y : y - y1)
#define DISTANCE2 ((x2 - x) > 0 ? x2 - x : x - x2) + ((y2 - y) > 0 ? y2 - y : y - y2)
#define UP map[i - 1][j]
#define DOWN map[i - 1][j]
#define LEFT map[i][j - 1]
#define RIGHT map[i][j + 1]

void color(int bg, int txt)
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 16 * bg + txt);
}

char c[] = { "Copyright 2022. 정지원. All rights reserved." };
int map[20][20] = { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0 },
					{ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0 },
					{ 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
					{ 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0 },
					{ 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0 },
					{ 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0 },
					{ 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
					{ 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0 },
					{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0 },
					{ 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0 },
					{ 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
					{ 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0 },
					{ 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0 },
					{ 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 },
					{ 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0 },
					{ 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
char title[40][100] = { {"                    ___           ___           ___"}, 
						{"     _____         /\\  \\         /\\  \\         /|  |   "}, 
						{"    /::\\  \\       /::\\  \\       /::\\  \\       |:|  |    "}, 
						{"   /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\__\\      |:|  |"}, 
						{"  /:/  \\:\\__\\   /:/ /::\\  \\   /:/ /:/  /    __|:|  | "}, 
						{" /:/__/ \\:|__| /:/_/:/\\:\\__\\ /:/_/:/__/___ /\\ |:|__|____"}, 
						{" \\:\\  \\ /:/  / \\:\\/:/  \\/__/ \\:\\/:::::/  / \\:\\/:::::/__/"}, 
						{"  \\:\\  /:/  /   \\::/__/       \\::/~~/~~~~   \\::/~~/~ "}, 
						{"   \\:\\/:/  /     \\:\\  \\        \\:\\~~\\        \\:\\~~\\"}, 
						{"    \\::/  /       \\:\\__\\        \\:\\__\\        \\:\\__\\    "}, 
						{"     \\/__/         \\/__/         \\/__/         \\/__/          "},
						{"      ___           ___        "},
						{"     /\\  \\         /\\  \\         _____"},
						{"    /::\\  \\        \\:\\  \\       /::\\  \\   "},
						{"   /:/\\:\\  \\        \\:\\  \\     /:/\\:\\  \\  "},
						{"  /:/ /::\\  \\   _____\\:\\  \\   /:/  \\:\\__\\"},
						{" /:/_/:/\\:\\__\\ /::::::::\\__\\ /:/__/ \\:|__|"},
						{" \\:\\/:/  \\/__/ \\:\\~~\\~~\\/__/ \\:\\  \\ /:/  /"},
						{"  \\::/__/       \\:\\  \\        \\:\\  /:/  /  "},
						{"   \\:\\  \\        \\:\\  \\        \\:\\/:/  / "},
						{"    \\:\\__\\        \\:\\__\\        \\::/  /  "},
						{"     \\/__/         \\/__/         \\/__/  "},
						{"      ___           ___           ___           ___   "}, 
						{"     /\\__\\         /\\__\\         /\\__\\         /|  |  "},
						{"    /:/ _/_       /:/ _/_       /:/ _/_       |:|  |  "}, 
						{"   /:/ /\\  \\     /:/ /\\__\\     /:/ /\\__\\      |:|  |   "}, 
						{"  /:/ /::\\  \\   /:/ /:/ _/_   /:/ /:/ _/_   __|:|  |  "}, 
						{" /:/_/:/\\:\\__\\ /:/_/:/ /\\__\\ /:/_/:/ /\\__\\ /\\ |:|__|____"}, 
						{" \\:\\/:/ /:/  / \\:\\/:/ /:/  / \\:\\/:/ /:/  / \\:\\/:::::/__/ "}, 
						{"  \\::/ /:/  /   \\::/_/:/  /   \\::/_/:/  /   \\::/~~/~    "}, 
						{"   \\/_/:/  /     \\:\\/:/  /     \\:\\/:/  /     \\:\\~~\\    "},
						{"     /:/  /       \\::/  /       \\::/  /       \\:\\__\\ "}, 
						{"     \\/__/         \\/__/         \\/__/         \\/__/  "} };
char settings[15][70] = { 
						{" How To Play."},
						{" There is a dark map"},
						{" and only the player's surroundings are bright."},
						{" Inside the map,"},
						{" Player1 must chase Player2."},
						{" When Player1 catches Player2,"},
						{" the positions of both players are reset"},
						{" and the chaser changes."},
						{" While Player1 chases Player2, the timer goes up."},
						{" while Player2 chases Player1, the timer goes down."},
						{" One round passes when both players"}, 
						{" have captured their opponents."},
						{" And the winner is determined "},
						{" by the sign of the timer"},
						{" when all rounds have been completed."} };

void printmap();
void start_menu();
void up1();
void down1();
void left1();
void right1();
void up2();
void down2();
void left2();
void right2();
void (*move[2][4])() = { { up1, down1, left1, right1 }, { up2, down2, left2, right2 } };
void keyboardscan();
int caught();
void printwall(int, int);

int main()
{
	srand(time(NULL));
	system("mode con:cols=60 lines=45");
	start_menu(); //시작 메뉴

	for (int i = 0; i < round * 2; i++)
	{
		while (1)
		{
			printmap();
			keyboardscan();
			CLS;
			if (caught())
			{
				turn *= -1;
				break;
			}
		}
	}
	printmap();
	if (t_l > 0)
	{
		printf("\n\n            Player 2 WIN");
	}
	else if (t_l < 0)
	{
		printf("\n\n            Player 1 WIN");
	}
	else
	{
		printf("\n\n           DRAW");
	}
	Sleep(10000);
}

void start_menu()
{
	printf("\n     ");
	for (int i = 0; c[i] != NULL; i++)
	{
		printf("%c", c[i]);
		switch (c[i])
		{
		case ' ':
			Sleep(100);
			break;

		case '.':
			Sleep(300);
			break;

		default:
			Sleep(50);
			break;
		}
	}
	Sleep(2000);

	for (int h = 0; h < 3; h++) {
		CLS;
		for (int i = 0; i < 39; i++)
		{
			for (int j = 0; title[i][j] != NULL; j++)
			{
				int a = rand() % (3 - (2 - h) / 2);
				if (h == 2)
				{
					color(0, 15);
				}
				else if (a > 3)
				{
					color(0, 0);
				}
				else
				{
					color(0, 8 * a - (a / 2));
				}
				printf("%c", title[i][j]);
			}
			printf("\n");
		}
		Sleep(1);
	}

	printf("              Press Any Key To Start");

	while (1)
	{
		if (_kbhit())
		{
			int a = _getch();
			CLS;
			break;
		}
	}
	for (int h = 0; h < 3; h++) {
		for (int i = 0; i < 39; i++)
		{
			for (int j = 0; title[i][j] != NULL; j++)
			{
				int a = rand() % (3 - h / 2);
				if (a > 3)
				{
					color(0, 0);
				}
				else 
				{
					color(0, 8 * a - (a / 2));
				}
				printf("%c", title[i][j]);
			}
			printf("\n");
		}
		Sleep(1);
		CLS;
	}
	color(0, 15);
	for (int h = 0; h < 3; h++) {
		CLS;
		for (int i = 0; i < 15; i++)
		{
			for (int j = 0; settings[i][j] != NULL; j++)
			{
				int a = rand() % (3 - (2 - h) / 2);
				if (h == 2)
				{
					color(0, 15);
				}
				else if (a > 3)
				{
					color(0, 0);
				}
				else
				{
					color(0, 8 * a - (a / 2));
				}
				printf("%c", settings[i][j]);
				if (settings[i][j] == '.')
				{
					printf("\n");
				}
			}
			printf("\n");
		}
		Sleep(30);
	}
	printf("               set rounds : ");
	scanf("%d", &round);
	CLS;
	for (int h = 0; h < 3; h++) {
		for (int i = 0; i < 15; i++)
		{
			for (int j = 0; settings[i][j] != NULL; j++)
			{
				int a = rand() % (3 - h / 2);
				if (a > 3)
				{
					color(0, 0);
				}
				else
				{
					color(0, 8 * a - (a / 2));
				}
				printf("%c", settings[i][j]);
				if (settings[i][j] == '.')
				{
					printf("\n");
				}
			}
			printf("\n");
		}
		Sleep(50);
		CLS;
	}
}
void printmap()
{
	for (int i = -1; i < 21; i++)
	{
		printwall(-1, i);
	}
	printf("\n");
	for (int i = 0; i < 20; i++)
	{
		printwall(i, -1);
		for (int j = 0; j < 20; j++)
		{
			if (i == y1 && j == x1)
			{
				printf("11");
			}
			else if (i == y2 && j == x2)
			{
				printf("22");
			}
			else if (map[i][j] == 0)
			{
				printf("  ");
			}
			else
			{
				printwall(i, j);
			}
		}
		printwall(i, 20);
		printf("\n");
	}
	for (int i = -1; i < 21; i++)
	{
		printwall(20, i);
	}
	turn == 1 ? printf("\n\n    Hunter : Player 1\n\n                    timer : %.1f", t_l) : printf("\n    Hunter : Player 2\n                    timer : %.1f", t_l);
}
void keyboardscan()
{
	char temp;
	int timer = (unsigned)time(NULL);
	while (1)
	{
		if (_kbhit() || (unsigned)time(NULL) - timer > 0.1)
		{
			if ((unsigned)time(NULL) - timer > 0.1)
			{
				count1 = 0, count2 = 0;
				timer = (unsigned)time(NULL);
				t_l += turn;
			}
			else {
				temp = _getch();
				if (temp == -32)
				{
					if (count2 > MAX_MPS)
					{
						continue;
					}
					temp = _getch();
					switch (temp)
					{
					case P2LEFT:
						move[1][2]();
						break;

					case P2RIGHT:
						move[1][3]();
						break;

					case P2UP:
						move[1][0]();
						break;

					case P2DOWN:
						move[1][1]();
						break;

					default:
						break;
					}
				}
				else
				{
					if (count1 > MAX_MPS)
					{
						continue;
					}
					switch (temp)
					{
					case P1LEFT:
						move[0][2]();
						break;

					case P1RIGHT:
						move[0][3]();
						break;

					case P1UP:
						move[0][0]();
						break;

					case P1DOWN:
						move[0][1]();
						break;
					case P1LEFT + 32:
						move[0][2]();
						break;

					case P1RIGHT + 32:
						move[0][3]();
						break;

					case P1UP + 32:
						move[0][0]();
						break;

					case P1DOWN + 32:
						move[0][1]();
						break;

					default:
						break;
					}
				}
			}
			break;
		}
	}
}
void up1()
{
	count1++;
	if (map[y1 - 1][x1] == 0 && y1 != 0)
	{
		y1 -= 1;
	}
}
void down1()
{
	count1++;
	if (map[y1 + 1][x1] == 0 && y1 != 19)
	{
		y1 += 1;
	}
}
void left1()
{
	count1++;
	if (map[y1][x1 - 1] == 0 && x1 != 0)
	{
		x1 -= 1;
	}
}
void right1()
{
	count1++;
	if (map[y1][x1 + 1] == 0 && x1 != 19)
	{
		x1 += 1;
	}
}
void up2()
{
	count2++;
	if (map[y2 - 1][x2] == 0 && y2 != 0)
	{
		y2 -= 1;
	}
}
void down2()
{
	count2++;
	if (map[y2 + 1][x2] == 0 && y2 != 19)
	{
		y2 += 1;
	}
}
void left2()
{
	count2++;
	if (map[y2][x2 - 1] == 0 && x2 != 0)
	{
		x2 -= 1;
	}
}
void right2()
{
	count2++;
	if (map[y2][x2 + 1] == 0 && x2 != 19)
	{
		x2 += 1;
	}
}
int caught()
{
	if (x1 == x2 && y1 == y2)
	{
		x1 = 0;
		y1 = 0;

		x2 = 19;
		y2 = 19;

		return 1;
	}
	else
	{
		return 0;
	}
}
void printwall(int y, int x)
{
	if (DISTANCE1 < Lv1 || DISTANCE2 < Lv1)
	{
		color(0, 15);
		printf(WALL);
	}
	else if (DISTANCE1 < Lv2 || DISTANCE2 < Lv2)	
	{
		color(0, 8);
		printf(WALL);
	}
	else
	{
		printf("  ");
	}
	color(0, 15);
}
